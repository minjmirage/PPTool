package  {	import flash.display.DisplayObject;	import flash.events.KeyboardEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.display.Loader;	import flash.display.Stage;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Matrix;	import flash.net.URLRequest;		import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.GlowFilterPlugin; 	TweenPlugin.activate([GlowFilterPlugin]); //activation is permanent in the SWF, so this line only needs to be run once.		public class MenuUtils 	{		private var stage:Stage = null;				//===================================================================================		// 		//===================================================================================		public function MenuUtils(_stage:Stage):void		{			stage = _stage;		}//endconstr				//===================================================================================		// 		//===================================================================================		public function createText(txt:String="",w:int=-1,fontSize:int=14,fontColor:uint=0x000000) : TextField		{			if (txt == null) txt = "";			var tf:TextField = new TextField();			tf.height = 1;			tf.autoSize = "left";			tf.wordWrap = false;			tf.selectable = false;			tf.embedFonts = true;			var tff:TextFormat = new TFMC().tf.defaultTextFormat;			tff.size = fontSize;			tff.color = fontColor;			tf.defaultTextFormat = tff;			tf.setTextFormat(tff);			tf.textColor = fontColor;			tf.htmlText = txt;			if (w>0)			{				var h:int = tf.height+1;				tf.autoSize = "none";				tf.width = w;				tf.height = h;			}						return tf;		}//endfunction				//===================================================================================		// creates a text input textfield enabling input on click 		//===================================================================================		public function createInputText(onTextChange:Function,txt:String="",w:int=-1,size:uint=14,c:uint=0x000000) : TextField		{			var tf:TextField = createText(txt,w,size,c);			tf.selectable = true;			tf.multiline = true;			tf.addEventListener(MouseEvent.CLICK,enterEditHandler);			tf.addEventListener(Event.REMOVED_FROM_STAGE,removeHandler);												function enterEditHandler(ev:Event):void			{				tf.removeEventListener(MouseEvent.CLICK,enterEditHandler);				tf.border = true;				tf.type = "input";				tf.addEventListener(KeyboardEvent.KEY_DOWN,exitEditHandler);				stage.addEventListener(MouseEvent.MOUSE_DOWN,exitEditHandler);			}//endfunction						function exitEditHandler(ev:Event):void			{				if(ev is MouseEvent && !tf.hitTestPoint(stage.mouseX,stage.mouseY) ||	// clicked elsewhere				   (ev is KeyboardEvent && (ev as KeyboardEvent).charCode==13))			// key is ENTER				{					tf.removeEventListener(KeyboardEvent.KEY_DOWN,exitEditHandler);					stage.removeEventListener(MouseEvent.MOUSE_DOWN,exitEditHandler);					tf.addEventListener(MouseEvent.CLICK,enterEditHandler);					tf.border = false;					tf.type = "dynamic";					if (onTextChange!=null) onTextChange(tf.text);				}			}//endfunction						function removeHandler(ev:Event):void			{				tf.removeEventListener(MouseEvent.CLICK,enterEditHandler);				stage.removeEventListener(MouseEvent.MOUSE_DOWN,exitEditHandler);				tf.removeEventListener(KeyboardEvent.KEY_DOWN,exitEditHandler);				tf.removeEventListener(Event.REMOVED_FROM_STAGE,removeHandler);			}//endfunction						return tf;		}//endfunction				//===================================================================================		// progresses to next frame when clicked		//===================================================================================		public function createRadioButton(mc:MovieClip,onStateChange:Function) : MovieClip		{			mc.buttonMode = true;			mc.gotoAndStop(1);			function clickHandler(ev:Event):void			{				mc.gotoAndStop(mc.currentFrame%mc.totalFrames+1);				if (onStateChange!=null) onStateChange(mc.currentFrame-1);			}			function removeHandler(ev:Event):void			{				mc.removeEventListener(MouseEvent.CLICK,clickHandler);				mc.removeEventListener(Event.REMOVED_FROM_STAGE,removeHandler);			}			mc.addEventListener(MouseEvent.CLICK,clickHandler);			mc.addEventListener(Event.REMOVED_FROM_STAGE,removeHandler);						return mc;		}//endfunction				//===================================================================================		// 		//===================================================================================		public function createDropDownList(TxtLst:Vector.<String>,defa:String,onValChange:Function,w:int=-1,windowSize:int=5,c:uint=0x000000) : Sprite		{			if (TxtLst==null || TxtLst.length==0) return null;						var s:Sprite = new Sprite();						var Tfs:Vector.<TextField> = new Vector.<TextField>();			for (var i:int=0; i<TxtLst.length; i++)			{				var tf:TextField = createText(TxtLst[i],-1,12,c);				if (w>-1 && tf.width > w)	{ tf.autoSize = "none";  tf.width=w; }				Tfs.push(tf);			}			for (i=0; i<TxtLst.length; i++)			{				var h:int = Tfs[i].height;				tf = Tfs[i];				tf.autoSize = "none";				tf.width = w;				tf.height = h;				tf.background = true;			}						var dispTf:TextField = createText(defa,w,13,c);			dispTf.border = true;			dispTf.background = true;			dispTf.backgroundColor = 0xEEEEEE;			s.addChild(dispTf);			s.buttonMode = true;						var dropD:Sprite = new Sprite();						function expandHandler(ev:Event):void			{				s.removeEventListener(MouseEvent.CLICK,expandHandler);				dropD.addEventListener(MouseEvent.CLICK,retractHandler);				dropD.x = s.x;				dropD.y = s.y+dispTf.height;				if (s.parent!=null) s.parent.addChild(dropD);				var py:int=0;				for (var i:int=0; i<Tfs.length; i++)				{					TweenLite.to(Tfs[i],0.5,{y:py});					py+=Tfs[i].height;					dropD.addChildAt(Tfs[i],0);				}			}//endfunction						function retractHandler(ev:Event):void			{				dropD.removeEventListener(MouseEvent.CLICK,retractHandler);				s.addEventListener(MouseEvent.CLICK,expandHandler);				function retr(tf:TextField,del:Number):void				{					if (tf.parent==dropD)						TweenLite.to(tf,0.5,{y:0, onComplete:function():void 						{							dropD.removeChild(tf); 							if (dropD.numChildren==0 && dropD.parent!=null) 							dropD.parent.removeChild(dropD);						}});				}				for (var i:int=0; i<Tfs.length; i++)				{					if (Tfs[i].hitTestPoint(stage.mouseX,stage.mouseY))					{						dispTf.text = Tfs[i].text;						if (onValChange!=null) onValChange(dispTf.text);					}					if (Tfs[i].parent!=null)						retr(Tfs[i],0.01*i);				}			}//endfunction						function removeHandler(ev:Event):void			{				s.removeEventListener(MouseEvent.CLICK,expandHandler);				dropD.removeEventListener(MouseEvent.CLICK,retractHandler);				s.removeEventListener(Event.REMOVED_FROM_STAGE, removeHandler);				if (dropD.parent!=null)	dropD.parent.removeChild(dropD);			}//endfunction			s.addEventListener(MouseEvent.CLICK,expandHandler);			s.addEventListener(Event.REMOVED_FROM_STAGE,removeHandler);						return s;		}//endfunction				//===================================================================================		// 		//===================================================================================		public function createChoices(title:String,Labels:Vector.<String>,Fns:Vector.<Function>,w:int=100):Sprite		{			var s:Sprite = new Sprite();			s.addChild(createText(title));			var n:int = Math.min(Labels.length, Fns.length);			for (var i:int = 0; i<n; i++)				s.addChild(createTextButton(Labels[i], Fns[i],w-20));						var ww:int = s.width;			var yOff:int = 10;			for (i = 0; i < s.numChildren; i++)			{				var e:DisplayObject = s.getChildAt(i);				e.x = (w - e.width) / 2;				e.y = yOff;				yOff += e.height + 5;			}						s.graphics.beginFill(0xEEEEEE, 1);			s.graphics.drawRect(0, 0, w, yOff + 5);			s.graphics.endFill();						return s;		}//endfunction				//===================================================================================		// creates a text button of specified width		//===================================================================================		public function createTextButton(txt:String,onClick:Function,w:int=-1) : Sprite		{			var tf:TextField = createText(txt,w);			var s:Sprite = new Sprite();			tf.x = 5;			s.addChild(tf);			s.graphics.beginFill(0xFFFFFF,1);			s.graphics.drawRoundRect(0,0,tf.width+10,tf.height,5,5);			s.graphics.endFill();						return setAsButton(s,onClick);		}//endfunction				//===================================================================================		// creates a choice button of specified width		//===================================================================================		public function createNoTitleChoices(Labels:Vector.<String>,Fns:Vector.<Function>,w:int=120):Sprite		{			var s:Sprite = new Sprite();			var n:int = Math.min(Labels.length, Fns.length);			for (var i:int = 0; i<n; i++)				s.addChild(createChoiceButton(Labels[i], Fns[i],w,32));						var ww:int = s.width;			var yOff:int = 0;			for (i = 0; i < s.numChildren; i++)			{				var e:DisplayObject = s.getChildAt(i);				e.x = (w - e.width) / 2;				e.y = yOff;				yOff += e.height;			}						return s;		}//endfunction				//===================================================================================		// creates a choice button of specified width		//===================================================================================		public function createChoiceButton(txt:String,onClick:Function,w:int,h:int) : Sprite		{			var s:Sprite = new Sprite();			s.graphics.lineStyle(0, 0x999999, 1);			s.graphics.beginFill(0xFFFFFF,1);			s.graphics.drawRect(0,0,w,h);			s.graphics.endFill();						var tf:TextField = createText(txt,-1,12,0x999999);			tf.x = 20;// (s.width - tf.width) / 2;			tf.y = (s.height - tf.height) / 2;			s.addChild(tf);									s.buttonMode = true;			s.mouseChildren = false;			function rollOverHandler(ev:Event):void			{				var tff:TextFormat = tf.getTextFormat();				tff.color = 0xFFFFFF;				tf.setTextFormat(tff);				s.graphics.clear();				s.graphics.lineStyle(0, 0x999999, 1);				s.graphics.beginFill(0x999999,1);				s.graphics.drawRect(0,0,w,h);				s.graphics.endFill();			}			function rollOutHandler(ev:Event):void			{				var tff:TextFormat = tf.getTextFormat();				tff.color = 0x999999;				tf.setTextFormat(tff);				s.graphics.clear();				s.graphics.lineStyle(0, 0x999999, 1);				s.graphics.beginFill(0xFFFFFF,1);				s.graphics.drawRect(0,0,w,h);				s.graphics.endFill();			}			function clickHandler(ev:Event):void			{				if (onClick!=null) onClick();			}			function removeHandler(ev:Event):void			{				s.removeEventListener(MouseEvent.CLICK,clickHandler);				s.removeEventListener(MouseEvent.MOUSE_OVER,rollOverHandler);				s.removeEventListener(MouseEvent.MOUSE_OUT,rollOutHandler);				s.removeEventListener(Event.REMOVED_FROM_STAGE,removeHandler);			}			s.addEventListener(MouseEvent.CLICK,clickHandler);			s.addEventListener(MouseEvent.MOUSE_OVER,rollOverHandler);			s.addEventListener(MouseEvent.MOUSE_OUT,rollOutHandler);			s.addEventListener(Event.REMOVED_FROM_STAGE, removeHandler);						return s;		}//endfunction				//===================================================================================		// 		//===================================================================================		public function setAsButton(s:Sprite,onClick:Function) : Sprite		{			s.buttonMode = true;			s.mouseChildren = false;			function rollOverHandler(ev:Event):void			{				TweenLite.to(s, 0.5, {glowFilter:{color:0x000000, blurX:4, blurY:4, strength:1, alpha:1}});			}			function rollOutHandler(ev:Event):void			{				TweenLite.to(s, 0.5, {glowFilter:{color:0x000000, blurX:4, blurY:4, strength:1, alpha:0, remove:true}});			}			function clickHandler(ev:Event):void			{				if (onClick!=null) onClick();			}			function removeHandler(ev:Event):void			{				s.removeEventListener(MouseEvent.CLICK,clickHandler);				s.removeEventListener(MouseEvent.MOUSE_OVER,rollOverHandler);				s.removeEventListener(MouseEvent.MOUSE_OUT,rollOutHandler);				s.removeEventListener(Event.REMOVED_FROM_STAGE,removeHandler);			}			s.addEventListener(MouseEvent.CLICK,clickHandler);			s.addEventListener(MouseEvent.MOUSE_OVER,rollOverHandler);			s.addEventListener(MouseEvent.MOUSE_OUT,rollOutHandler);			s.addEventListener(Event.REMOVED_FROM_STAGE,removeHandler);			return s;		}//endfunction				//===================================================================================		// returns bitmap with bitmapdata a thumbnail of asset at picUrl		//===================================================================================		public function createThumbnail(picUrl:String,onLoaded:Function=null,w:int=50,h:int=50) : Bitmap		{			var bmp:Bitmap = new Bitmap(new BitmapData(w,h,false,0xFFFFFF));			loadAsset(picUrl,function(asset:DisplayObject):void 					{						if (asset!=null)							bmp.bitmapData.draw(asset,new Matrix(w/asset.width,0,0,h/asset.height));						if (onLoaded!=null) onLoaded(asset);					});						return bmp;		}//endfunction				//===================================================================================		// convenience function to load display asset and do callback returning ref to asset		//===================================================================================		private static var LoadedAssets:Array = [];		private static var loadQ:Array = [];		public static function loadAsset(url:String, callBack:Function = null, reload:Boolean=false):void		{			//prn("loadPic("+url);			if (reload==false && LoadedAssets.indexOf(url)!=-1)			{				var ass = LoadedAssets[LoadedAssets.indexOf(url) + 1];				if (ass is Bitmap && ass.width<300 && ass.height<300) 				{					var bmp:Bitmap = new Bitmap(new BitmapData(ass.width, ass.height));					bmp.bitmapData.draw(ass);					callBack(bmp);				}				else					callBack(LoadedAssets[LoadedAssets.indexOf(url)+1]);	// return cached pic				return;			}						loadQ.push(url);			if (loadQ.length == 1)			{				function loadNext():void				{					var ldr:Loader = new Loader();					function loadCompleteHandler(e:Event):void						{						if (ldr.content != null) 						{							if (LoadedAssets.indexOf(url) != -1)								LoadedAssets[LoadedAssets.indexOf(url) + 1] = ldr.content;							else								LoadedAssets.push(url,ldr.content);						}						if (callBack != null) callBack(ldr.content);						if (loadQ.length > 0) loadNext();					}//endfunction					ldr.addEventListener(IOErrorEvent.IO_ERROR, loadCompleteHandler);					ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadCompleteHandler);					ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);					try {ldr.load(new URLRequest(loadQ.shift()));}	catch (error:Error)						{						loadCompleteHandler(null);					}				}//endfunction							loadNext();			}//endifs		}//endfunction			}//endclass}//endpackage